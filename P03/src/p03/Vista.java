/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package p03;


import java.util.GregorianCalendar;


/**
 *
 * @author damar
 */
public class Vista extends javax.swing.JFrame {

    Lista<Cuenta> lista = new <Cuenta> Lista();
    int modo=0; //me dice si estamos en ver, crear, borrar o en ninguno (0 inicio, 1 ver, 2 crear, 3 borrar)

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Titulo = new javax.swing.JLabel();
        botonver = new javax.swing.JButton();
        botonborrar = new javax.swing.JButton();
        botoncrear = new javax.swing.JButton();
        labelnumero = new javax.swing.JLabel();
        labelfecha = new javax.swing.JLabel();
        labelsaldo = new javax.swing.JLabel();
        labelpropietario = new javax.swing.JLabel();
        fieldnumero = new javax.swing.JTextField();
        fieldsaldo = new javax.swing.JTextField();
        fieldfecha = new javax.swing.JTextField();
        fieldpropietario = new javax.swing.JTextField();
        fieldaviso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 0));

        Titulo.setFont(new java.awt.Font("Sitka Subheading", 1, 36)); // NOI18N
        Titulo.setForeground(new java.awt.Color(255, 102, 51));
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("BANCO");
        Titulo.setToolTipText("");

        botonver.setForeground(new java.awt.Color(51, 102, 255));
        botonver.setText("VER CUENTAS");
        botonver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonverActionPerformed(evt);
            }
        });

        botonborrar.setForeground(new java.awt.Color(51, 102, 255));
        botonborrar.setText("BORRAR");
        botonborrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonborrarActionPerformed(evt);
            }
        });

        botoncrear.setForeground(new java.awt.Color(51, 102, 255));
        botoncrear.setText("CREAR CUENTA");
        botoncrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoncrearActionPerformed(evt);
            }
        });

        labelnumero.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        labelnumero.setText("Numero de cuenta:");

        labelfecha.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        labelfecha.setText("Fecha:");

        labelsaldo.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        labelsaldo.setText("Saldo:");

        labelpropietario.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        labelpropietario.setText("Propietario:");

        fieldnumero.setText("jTextField1");

        fieldsaldo.setText("jTextField1");
        fieldsaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldsaldoActionPerformed(evt);
            }
        });

        fieldfecha.setText("jTextField1");
        fieldfecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldfechaActionPerformed(evt);
            }
        });

        fieldpropietario.setText("jTextField1");

        fieldaviso.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        fieldaviso.setForeground(new java.awt.Color(255, 0, 0));
        fieldaviso.setText("LA LISTA ESTÁ VACÍA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(botoncrear, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(botonborrar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(botonver, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelnumero)
                    .addComponent(labelsaldo)
                    .addComponent(labelfecha)
                    .addComponent(labelpropietario))
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldnumero, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldsaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldfecha, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldpropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldaviso)
                .addGap(258, 258, 258))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldaviso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelnumero)
                    .addComponent(fieldnumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelsaldo)
                    .addComponent(fieldsaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelfecha)
                    .addComponent(fieldfecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelpropietario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonver, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(botoncrear, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(botonborrar, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldpropietario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonverActionPerformed
        if(modo==0){    //Si estamos en el inicio
            if (lista.getInicio() == null) {        //Si la lista está vacía
                fieldaviso.setVisible(true);    //Saldría el mensaje
                System.err.println("LA LISTA ESTA VACÍA");
            } else {        //Si no
                labelsVisibles();   //Muestra los labels
                reiniciarFields(lista); //Pone el texto de los fields a los datos de inico
                botoncrear.setText("Anterior"); //Cambia texto de los botones (también cambia su funcionalidad)
                botoncrear.setEnabled(false);   //Ya que muestra los datos del inicio, no podríamos darle al anterior
                botonborrar.setText("Salir");  
                botonver.setText("Siguiente");
                botonborrar.setVisible(true);
                modo = 1;       //Cambia el modo a ver
            }
        }else if(modo==1 || modo==3){   //Si estamos en borrar o ver
            siguienteFields(lista); //Cambia los datos de los fields al del proximo nodo
        }else if(modo==2){  //Si estamos en crear
            
            Cuenta aux; //creamos una cuenta
                
            int numero=Integer.parseInt(fieldnumero.getText()); //de datos tendrá lo escrito en los fields
            int saldo=Integer.parseInt(fieldnumero.getText());
            String propietario=fieldpropietario.getText();
                    
            if( fieldfecha.getText().equalsIgnoreCase("")){ //Si el usuario ha dejado la fecha vacia
                aux= new Cuenta(numero, saldo, propietario);    //se crea con la fecha del sistema
            }else{  //si no
                int[] fecha = new int[3];
                String[] fechatexto = fieldfecha.getText().split( "/", 3);  //divide cada dato de la fecha escrita en un array

                for(int i=0; i<3; i++){
                    fecha[i]=Integer.parseInt(fechatexto[i]);   //Pasamos la array a una de ints
                }
               
               GregorianCalendar fechafinal= new GregorianCalendar(fecha[0],fecha[1],fecha[2]); //le decimos la fecha con los datros
               
               aux= new Cuenta (numero, saldo, fechafinal, propietario);    //Creamos la cuenta
               
            }
                
            lista.insertar(aux);    //La insertamos
            reiniciarVista();   //Deja la vista como al inicio
        }
    }//GEN-LAST:event_botonverActionPerformed

    private void botoncrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoncrearActionPerformed
        if(modo==0){    //Si estamos en el inicio
            labelsVisibles();   //Muestra los labels
            vaciarFields();     //Deja los fields vacios
            botoncrear.setText("Cancelar");
            botonver.setText("Aceptar");
            fieldfecha.setText("dd/mm/aaaa");  //Para ayudar a indicar como debe estar la fecha escrita
            modo=2;
        }
        else if(modo==1 || modo==3){    //Si estamos en ver o borrar
            anteriorFields(lista);  //Cambia los datos de los fields al del nodo anterior
        }
        else if (modo==2){  //Si estamos en crear
            reiniciarVista();   //Deja la vista como al inicio
        }
    }//GEN-LAST:event_botoncrearActionPerformed

    private void botonborrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonborrarActionPerformed
       
        if(modo==0){    //IDEM
            if (lista.getInicio() == null) {
                    fieldaviso.setVisible(true);
                System.err.println("LA LISTA ESTA VACÍA");
            } else {
                labelsVisibles();
                reiniciarFields(lista);
                botoncrear.setText("Anterior");
                botoncrear.setEnabled(false);
                botonborrar.setText("Borrar");
                botonver.setText("Siguiente");
                botonborrar.setVisible(true);
                modo = 3;   //CAambia el modo a borrar
            }
        }
        else if (modo==1){  //Si modo ver
            reiniciarVista();   //Dejamos la vista como al inicio
        }
        else if(modo==3){   //Si modo es borrar
            if(lista.getActual().getAnterior()==null && lista.getActual().getSiguiente()==null){    //Si es el unico nodo
                lista.setInicio(null);  //Simplemente borramos la lista
            }else if(lista.getActual().getAnterior()==null){    //Si es el primer nodo
                lista.setInicio(lista.getActual().getSiguiente());  //Inicio ahora es el segundo nodo
                lista.getActual().getSiguiente().setAnterior(lista.getActual().getAnterior());  //El anterior de segundo es null
            }else if(lista.getActual().getSiguiente()==null){   //Si es el ultimo nodo
                lista.getActual().getAnterior().setSiguiente(lista.getActual().getSiguiente()); //El siguiente del anterior es null
            }else{  //Si es un nodo en el medio
                lista.getActual().getAnterior().setSiguiente(lista.getActual().getSiguiente()); //EL siguiente del anterior es el siguiente del actual
                lista.getActual().getSiguiente().setAnterior(lista.getActual().getAnterior());  //El anterior del siguiente es el anterior del actual
            }
            reiniciarVista();   //Deja la vista como al inicio
        }
    }//GEN-LAST:event_botonborrarActionPerformed

    private void fieldfechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldfechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldfechaActionPerformed

    private void fieldsaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldsaldoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldsaldoActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton botonborrar;
    private javax.swing.JButton botoncrear;
    private javax.swing.JButton botonver;
    private javax.swing.JLabel fieldaviso;
    private javax.swing.JTextField fieldfecha;
    private javax.swing.JTextField fieldnumero;
    private javax.swing.JTextField fieldpropietario;
    private javax.swing.JTextField fieldsaldo;
    private javax.swing.JLabel labelfecha;
    private javax.swing.JLabel labelnumero;
    private javax.swing.JLabel labelpropietario;
    private javax.swing.JLabel labelsaldo;
    // End of variables declaration//GEN-END:variables

    //AQUI SE PROGRAMA 
    public Vista() {
        super("BANCO"); //Nombre de la ventana

        initComponents();

        
        añadirEjemplos(lista); //Meto unos ejemplos para comprobar

        reiniciarVista();   //Deja la vista como al inicio
        
    }

    public static void añadirEjemplos(Lista<Cuenta> lista) {    //Añade unas cuentas a la lista
        lista.insertar(new Cuenta(1, 1200, "Antonio"));
        lista.insertar(new Cuenta(2, 150, "Dani"));
        lista.insertar(new Cuenta(3, -3151, "Prueba"));
        lista.insertar(new Cuenta(4, 2450, "Manuel"));
        lista.insertar(new Cuenta(5, 12425, "Ultimo"));
    }

    public void labelsInvisibles() {    //Pone invisibles todos los labels y fields
        labelnumero.setVisible(false);
        labelsaldo.setVisible(false);
        labelfecha.setVisible(false);
        labelpropietario.setVisible(false);
        fieldnumero.setVisible(false);
        fieldsaldo.setVisible(false);
        fieldfecha.setVisible(false);
        fieldpropietario.setVisible(false);
        fieldaviso.setVisible(false);

    }

    public void labelsVisibles() {  //Pone visibles todos los labels y fields
        labelnumero.setVisible(true);
        labelsaldo.setVisible(true);
        labelfecha.setVisible(true);
        labelpropietario.setVisible(true);
        fieldnumero.setVisible(true);
        fieldsaldo.setVisible(true);
        fieldfecha.setVisible(true);
        fieldpropietario.setVisible(true);
    }

    public void reiniciarFields(Lista lista) {  //Pone los datos de los fields al de inicio
        Cuenta aux = (Cuenta) lista.getInicio().getDatos(); //Creamos una cuenta con los datos de inicio
        fieldnumero.setText(Integer.toString(aux.getNumero())); //Le pasamos esos datos a los fields
        fieldsaldo.setText(Integer.toString(aux.getNumero()));
        fieldfecha.setText(aux.getFecha());
        fieldpropietario.setText(aux.getPropietario());
        lista.setActual(lista.getInicio()); //Indicamos a actual que se ponga a inicio
        fieldaviso.setVisible(false);
    }
    
    public void siguienteFields(Lista lista) {  //Pone los datos al del siguiente nodo
        lista.setActual(lista.getActual().getSiguiente());  //Actual es el siguiente de actual
        Cuenta aux = (Cuenta) lista.getActual().getDatos(); //IDEM a arriba
        fieldnumero.setText(Integer.toString(aux.getNumero()));
        fieldsaldo.setText(Integer.toString(aux.getNumero()));
        fieldfecha.setText(aux.getFecha());
        fieldpropietario.setText(aux.getPropietario());
        if(lista.getActual().getSiguiente()==null){ //Si se pasa al ultimo nodo, cancela el boton siguiente
            botonver.setEnabled(false); //Cancela el boton siguiente
        }
        if(!botoncrear.isEnabled()){    //Si el boton anterior esta disabled
            botoncrear.setEnabled(true);    //Lo enablea (ya que al pulsar el boton siguiente ya no puede ser el ultimo....)
        }
    }
    
    public void reiniciarVista(){   //Deja la vista como al inicio
        modo=0;
        labelsInvisibles();
        botonborrar.setVisible(true);
        botoncrear.setText("Crear cuenta");
        botonver.setText("Ver cuentas");
        botonborrar.setText("Borrar");
        botoncrear.setEnabled(true);
        botonver.setEnabled(true);
        botonborrar.setEnabled(true);
        fieldaviso.setVisible(false);
    }
    
    public void anteriorFields(Lista lista) {   //IDEM al de siguiente pero con el anterior
        lista.setActual(lista.getActual().getAnterior());
        Cuenta aux = (Cuenta) lista.getActual().getDatos();
        fieldnumero.setText(Integer.toString(aux.getNumero()));
        fieldsaldo.setText(Integer.toString(aux.getNumero()));
        fieldfecha.setText(aux.getFecha());
        fieldpropietario.setText(aux.getPropietario());
        if(lista.getActual().getAnterior()==null){
            botoncrear.setEnabled(false);
        }
        if(!botoncrear.isEnabled()){
            botonver.setEnabled(true);
        }
    }
    
    public void vaciarFields(){ //Vacia el texto de los fields
        fieldnumero.setText(null);
        fieldsaldo.setText(null);
        fieldfecha.setText(null);
        fieldpropietario.setText(null);
    }

}
